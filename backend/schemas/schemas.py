from pydantic import BaseModel, EmailStr
from datetime import date, datetime
from typing import Optional, List, Literal
from fastapi import UploadFile # Added for file uploads
from models.models import AttendanceStatus # Import AttendanceStatus

# Auth
class UserCreate(BaseModel):
    employee_id: int # New field: employee_id to link with
    name: str
    email: EmailStr
    # password: str # Password is now generated by the backend for staff creation

class UserLogin(BaseModel):
    email: EmailStr
    password: str

class UserOut(BaseModel):
    id: int
    name: str
    email: EmailStr
    role: Literal["admin", "staff"]
    created_at: datetime
    created_by_admin_id: Optional[int] = None # New field

    class Config:
        from_attributes = True

class StaffCreatedOut(BaseModel):
    id: int
    name: str
    email: EmailStr
    role: Literal["admin", "staff"]
    created_at: datetime
    temp_password: Optional[str] = None # Temporary password, only returned on creation

    class Config:
        from_attributes = True

class EmailSchema(BaseModel):
    email: EmailStr

class PasswordResetRequest(BaseModel):
    token: str
    new_password: str

class TokenData(BaseModel):
    id: Optional[int] = None # Changed type to Optional[int]
    email: Optional[EmailStr] = None
    name: Optional[str] = None
    is_admin: bool = False
    employee_id: Optional[int] = None
    company_name: Optional[str] = None # Added company_name
    company_logo_url: Optional[str] = None # Added company_logo_url

class StaffCreate(BaseModel):
    name: str
    email: EmailStr

# Employee
class EmployeeBase(BaseModel):
    name: str
    monthly_salary: Optional[float] = 0.0 # Made optional with default
    date_of_joining: Optional[date] = None
    bank_account: Optional[str] = None # Renamed from email
    position: Optional[str] = None
    department: Optional[str] = None
    status: Optional[str] = "active"
    salary_effective_from: Optional[date] = None

class EmployeeCreate(EmployeeBase): ...
class EmployeeUpdate(EmployeeBase): ...

class EmployeeOut(BaseModel):
    id: int
    user_id: Optional[int] = None # Make user_id optional as employees might not have a linked user account
    name: str
    position: Optional[str] = None
    department: Optional[str] = None
    monthly_salary: float
    date_of_joining: Optional[date] = None
    bank_account: Optional[str] = None
    status: Literal["active", "inactive"]
    salary_effective_from: Optional[date] = None
    created_at: datetime = datetime.utcnow()
    updated_at: datetime = datetime.utcnow()

    class Config:
        from_attributes = True

# Attendance
class AttendanceBase(BaseModel):
    date: date
    status: AttendanceStatus
    manual_overtime_hours: float = 0.0
    late_hours: Optional[float] = 0.0 # Added late_hours field

class AttendanceCreate(AttendanceBase):
    employee_id: int # employee_id should be here

# Schema for outputting attendance records, including the generated ID
class AttendanceOut(AttendanceBase):
    id: int
    employee_id: int # employee_id for output
    late_hours: Optional[float] = 0.0 # Added late_hours field
    class Config:
        from_attributes = True

# Holiday
class HolidayBase(BaseModel):
    date: date
    name: str

class HolidayCreate(HolidayBase): 
    # Add the parameter the frontend sends, defaulting to False if missing
    override_past_attendance: Optional[bool] = False
class HolidayOut(HolidayBase):
    id: int
    class Config:
        from_attributes = True

# Settings
class SettingsIn(BaseModel):
    standard_work_hours_per_day: float
    currency: Optional[str] = "INR" # Added currency field
    company_name: Optional[str] = None # Added company_name field
    overtime_multiplier: Optional[float] = None # Added overtime_multiplier field
    mark_sundays_as_holiday: Optional[bool] = False # Added mark_sundays_as_holiday field

class SettingsOut(SettingsIn):
    user_id: int
    company_logo_url: Optional[str] = None # Added for company logo
    class Config:
        from_attributes = True

# Company Logo
class CompanyLogoUpload(BaseModel):
    file: UploadFile

# Reports
class SalaryRow(BaseModel):
    employee_id: int
    name: str
    base_monthly_salary: float
    days_present: int
    half_days: int
    work_days: float
    paid_holiday_days: float
    total_paid_days: float
    total_overtime_hours: float
    total_late_hours: float # Added total_late_hours field
    hourly_rate: float
    total_hours_worked: float
    total_payable_salary: float
